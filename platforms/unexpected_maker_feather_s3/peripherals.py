"""
IO0: microcontroller.Pin = ...
D4: microcontroller.Pin = ...
IO18: microcontroller.Pin = ...
A1: microcontroller.Pin = ...
D15: microcontroller.Pin = ...
IO17: microcontroller.Pin = ...
A0: microcontroller.Pin = ...
D14: microcontroller.Pin = ...
IO14: microcontroller.Pin = ...
A2: microcontroller.Pin = ...
D16: microcontroller.Pin = ...
IO12: microcontroller.Pin = ...
A3: microcontroller.Pin = ...
D17: microcontroller.Pin = ...
IO6: microcontroller.Pin = ...
A4: microcontroller.Pin = ...
D18: microcontroller.Pin = ...
IO5: microcontroller.Pin = ...
A5: microcontroller.Pin = ...
D19: microcontroller.Pin = ...
IO36: microcontroller.Pin = ...
SCK: microcontroller.Pin = ...
D25: microcontroller.Pin = ...
IO35: microcontroller.Pin = ...
MOSI: microcontroller.Pin = ...
D24: microcontroller.Pin = ...
IO37: microcontroller.Pin = ...
MISO: microcontroller.Pin = ...
D23: microcontroller.Pin = ...
IO44: microcontroller.Pin = ...
D0: microcontroller.Pin = ...
RX: microcontroller.Pin = ...
IO43: microcontroller.Pin = ...
D1: microcontroller.Pin = ...
TX: microcontroller.Pin = ...
SDA: microcontroller.Pin = ...
IO8: microcontroller.Pin = ...
A11: microcontroller.Pin = ...
D21: microcontroller.Pin = ...
SCL: microcontroller.Pin = ...
IO9: microcontroller.Pin = ...
A12: microcontroller.Pin = ...
D22: microcontroller.Pin = ...
IO33: microcontroller.Pin = ...
D5: microcontroller.Pin = ...
IO38: microcontroller.Pin = ...
D6: microcontroller.Pin = ...
IO1: microcontroller.Pin = ...
D9: microcontroller.Pin = ...
A6: microcontroller.Pin = ...
IO3: microcontroller.Pin = ...
D10: microcontroller.Pin = ...
A7: microcontroller.Pin = ...
IO7: microcontroller.Pin = ...
D11: microcontroller.Pin = ...
A8: microcontroller.Pin = ...
IO10: microcontroller.Pin = ...
D12: microcontroller.Pin = ...
A9: microcontroller.Pin = ...
IO11: microcontroller.Pin = ...
D13: microcontroller.Pin = ...
A10: microcontroller.Pin = ...
LED: microcontroller.Pin = ...
BATTERY: microcontroller.Pin = ...
VBAT: microcontroller.Pin = ...
VBAT_SENSE: microcontroller.Pin = ...
VOLTAGE_MONITOR: microcontroller.Pin = ...
VBUS: microcontroller.Pin = ...
VBUS_SENSE: microcontroller.Pin = ...
NEOPIXEL_POWER: microcontroller.Pin = ...
NEOPIXEL: microcontroller.Pin = ...
IO4: microcontroller.Pin = ...
AMB: microcontroller.Pin = ...
LDO2: microcontroller.Pin = ...
IO39: microcontroller.Pin = ...
STEMMA_I2C: typing.Any = ...
"""
# TODO: Fill out w/ rest of capabilities

# Standard imports

# Third party imports
import board
import neopixel
from analogio import AnalogIn
from digitalio import DigitalInOut, Direction

# Local imports

# Globals


def rgb_color_wheel(wheel_pos):
    """Color wheel to allow for cycling through the rainbow of RGB colors."""
    wheel_pos = wheel_pos % 255

    if wheel_pos < 85:
        return (255 - wheel_pos * 3, 0, wheel_pos * 3)

    if wheel_pos < 170:
        wheel_pos -= 85
        return (0, wheel_pos * 3, 255 - wheel_pos * 3)

    wheel_pos -= 170
    return (wheel_pos * 3, 255 - wheel_pos * 3, 0)


class Peripherals():
    def __init__(self, enable_neo: bool = False) -> None:
        # LDO2 - NEOPIXEL_POWER is same pin as LD02
        # Second I2C bus and neopixel are powered via LDO2
        self._ld02 = DigitalInOut(board.LDO2)
        self._ld02.direction = Direction.OUTPUT
        self._ld02.value = enable_neo

        # Neopixels
        self.neopixels = neopixel.NeoPixel(board.NEOPIXEL, 1, brightness=0.2)

        # Battery Voltage
        self._batt_monitor = AnalogIn(board.BATTERY)

    def deinit(self) -> None:
        """Call deinit on all resources to free them"""
        self.neopixels.deinit()
        self._ld02.deinit()
        self._batt_monitor.deinit()

    @property
    def battery(self) -> float:
        """Return the voltage of the battery"""
        return self._batt_monitor.value / 5371

    @property
    def ld02(self) -> bool:
        """Check if LDO2 is enabled or not"""
        return self._ld02.value

    @ld02.setter
    def ld02(self, value: bool) -> None:
        """Disable or enbale LDO2"""
        self._ld02.value = value
